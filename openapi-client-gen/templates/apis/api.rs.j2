use std::sync::Arc;

use super::super::config::ClientConfig;
use super::super::Error;
use super::super::request;

/// {{tag.description}}
pub struct {{tag.struct_name()}} {
  config: Arc<dyn ClientConfig>,
}

impl {{tag.struct_name()}} {
    pub fn new(config: Arc<dyn ClientConfig>) -> {{tag.struct_name()}} {
      {{tag.struct_name()}} {
        config,
      }
    }

    {%~ for operation in tag.operations %}
    {%- let success_type = operation.success_type(models) %}
    /// {{operation.method}} {{operation.path-}}
    {% if let Some(summary) = operation.summary -%}
    {% for line in summary.trim().lines() %}
    /// {{line-}}
    {% endfor -%}
    {% endif -%}
    {% if let Some(_) = operation.description -%}
    {% let description = operation.clean_description() -%}
    {% for line in description.trim().lines() %}
    /// {{line-}}
    {% endfor -%}
    {% endif %}
    pub async fn {{operation.var_name()}}{% if operation.params_struct_has_str() %}<'a>{% endif %}(
        &self,
    {%- for param in operation.path_params %}
        {{param.var_name()}}: {{param.type_string()}},
    {%- endfor %}
    {%- if operation.should_use_params_struct() %}
        params: {{operation.struct_type()}},
    {%- endif %}
    {%- if let Some(body) = operation.body_param %}
        {{body.var_name()}}: {{body.model.type_string(models)}},
    {%- endif %}
    ) -> Result<{{success_type}}, Error> {
        let mut request_url = url::Url::parse(self.config.get_base_path())?;

        let mut request_path = request_url.path().to_owned();
        if request_path.ends_with('/') {
            request_path.pop();
        }
        request_path.push_str("{{operation.path}}");
        {%- if !operation.path_params.is_empty() %}
        {%- for param in operation.path_params  %}
        request_path = request_path.replace("{{"{"}}{{param.name}}{{"}"}}", {{param.var_name()}});
        {%- endfor %}
        {%- endif %}

        request_url.set_path(&request_path);

        let mut req_builder = self.config.req_builder("{{operation.method}}")?;

        {%~ if !operation.query_params.is_empty() || !operation.header_params.is_empty() %}
          {%- if operation.is_optional_params_struct() %}
        if let Some(params) = params {
          {%- endif %}
        {%- endif %}

        {%~ if !operation.query_params.is_empty() %}
          let mut query_pairs = request_url.query_pairs_mut();
          {%- for param in operation.query_params %}
          {%- if param.required %}
          query_pairs.append_pair("{{param.name}}", &params.{{param.to_string_string()}});
          {%- else %}
          if let Some({{param.var_name()}}) = params.{{param.var_name()}} {
              query_pairs.append_pair("{{param.name}}", &{{param.to_string_string()}});
          }
          {%- endif %}
          {%- endfor %}
        {%- endif %}

        {%~ if !operation.header_params.is_empty() %}
          {%- for param in operation.header_params %}
          {%- if param.required %}
          req_builder = req_builder.header("{{param.name}}", params.{{param.var_name()}});
          {%- else %}
          if let Some({{param.var_name()}}) = params.{{param.var_name()}} {
            req_builder = req_builder.header("{{param.name}}", {{param.var_name()}});
          }
          {%- endif %}
          {%- endfor %}
        {%- endif %}

        {%~ if !operation.query_params.is_empty() || !operation.header_params.is_empty() %}
          {%- if operation.is_optional_params_struct() %}
        }
          {%- endif %}
        {%- endif %}

        let hyper_uri: hyper::Uri = request_url.as_str().parse()?;
        req_builder = req_builder.uri(hyper_uri);

        {%- if let Some(body) = operation.body_param %}
        let body = serde_json::to_string(&{{body.var_name()}})?;
        req_builder = req_builder.header(hyper::header::CONTENT_TYPE, "application/json");
        req_builder = req_builder.header(hyper::header::CONTENT_LENGTH, body.len());
        let request = req_builder.body(body)?;
        {%- else %}
        let request = req_builder.body(String::new())?;
        {%- endif %}
        {%- if success_type == "()" %}
        request::execute_request_unit(&*self.config, request).await
        {%- else %}
        request::execute_request_json(&*self.config, request).await
        {%- endif %}
    }
    {%~ endfor %}}
