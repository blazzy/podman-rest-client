use std::sync::Arc;

use super::super::config::ClientConfig;
use super::super::Error;
use super::super::request;

/// {{tag.description}}
pub struct {{tag.struct_name()}} {
  config: Arc<dyn ClientConfig>,
}

impl {{tag.struct_name()}} {
    pub fn new(config: Arc<dyn ClientConfig>) -> {{tag.struct_name()}} {
      {{tag.struct_name()}} {
        config,
      }
    }

    {%~ for operation in tag.operations %}
    {%- let success_type = operation.success_type(models) %}
    /// {{operation.method}} {{operation.path-}}
    {% if let Some(summary) = operation.summary -%}
    {% for line in summary.trim().lines() %}
    /// {{line-}}
    {% endfor -%}
    {% endif -%}
    {% if let Some(description) = operation.description -%}
    {% for line in description.trim().lines() %}
    /// {{line-}}
    {% endfor -%}
    {% endif %}
    pub async fn {{operation.var_name()}}(
        &self,
    {%- for param in operation.params %}
        {{param.var_name()}}: {{param.type_string(models)}},
    {%- endfor %}
    ) -> Result<{{success_type}}, Error> {
        {%- let query_params = operation.query_params() %}
        {%- let path_params = operation.path_params() %}
        {%- let header_params = operation.header_params() %}
        {%- let body_params = operation.body_params() %}
        let mut request_url = url::Url::parse(self.config.get_base_path())?;

        let mut request_path = request_url.path().to_owned();
        if request_path.ends_with('/') {
            request_path.pop();
        }
        request_path.push_str("{{operation.path}}");
        {%- if !path_params.is_empty() %}
        {%- for param in path_params  %}
        request_path = request_path.replace("{{"{"}}{{param.spec_name}}{{"}"}}", {{param.var_name()}});
        {%- endfor %}
        {%- endif %}

        request_url.set_path(&request_path);

        {%~ if !query_params.is_empty() %}
        {
          let mut query_pairs = request_url.query_pairs_mut();
          {%- for param in query_params %}
          {%- if param.is_required() %}
          query_pairs.append_pair("{{param.spec_name}}", {{param.to_string_string()}});
          {%- else %}
          if let Some({{param.var_name()}}) = {{param.var_name()}} {
              query_pairs.append_pair("{{param.spec_name}}", {{param.to_string_string()}});
          }
          {%- endif %}
          {%- endfor %}
        }
        {%- endif %}

        {%~ let mut_builder = !body_params.is_empty() || !header_params.is_empty() %}
        let {% if mut_builder %}mut {% endif %}req_builder = self.config.req_builder(request_url.as_str(), "{{operation.method}}")?;

        {%~ if !header_params.is_empty() %}
        {%- for param in header_params %}
        {%- if param.is_required() %}
        req_builder = req_builder.header("{{param.spec_name}}", {{param.var_name()}});
        {%- else %}
        if let Some({{param.var_name()}}) = {{param.var_name()}} {
          req_builder = req_builder.header("{{param.spec_name}}", {{param.var_name()}});
        }
        {%- endif %}
        {%- endfor %}
        {%- endif %}

        {%- if !body_params.is_empty() %}
        let body = serde_json::to_string(&{{body_params[0].var_name()}})?;
        req_builder = req_builder.header(hyper::header::CONTENT_TYPE, "application/json");
        req_builder = req_builder.header(hyper::header::CONTENT_LENGTH, body.len());
        let request = req_builder.body(body)?;
        {%- else %}
        let request = req_builder.body(String::new())?;
        {%- endif %}
        {%- if success_type == "()" %}
        request::execute_request_unit(&*self.config, request).await
        {%- else %}
        request::execute_request_json(&*self.config, request).await
        {%- endif %}
    }
    {%~ endfor %}}
